Fa$t Banking Program
Name: Sierra Smith
Date Created: 11/07/2024

Program Description: 

This program includes a class "BankAcct" that holds various methods used to interact with the user's
"bank account." The user can deposit, withdrawal, check their balance, and choose an interest
rate for their bank account.


Functions used in the Program (list in order as they are called):


1. Function Name: main 
 
     Description: First function to be called that starts program with "login screen" and welcome message

     Parameters: None  

     Variables: 

	1. name(input string) - the user's name
	2. a_num(input string) - the user's "account number" (fictitious)

     Logical Steps: 

	1. Prints a login message indicating that the program is a banking platform.
	2. Prompts user to enter their name and account number.
	3. The user's name is included in a welcome message.

     Returns: None


2. Function Name: init_transaction  

     Description: Where an initial deposit transaction and interest rate are decided and calculated.

     Parameters: name(input string) - the user's name, a_num(input string) - the user's "account number"

     Variables: 

	1. adj(string) - variable that changes based on user input and controls "while" loop
	2. rate_info(list) - options and info for each rate; stored in sub lists
	3. t(table object) - an object for creating a table from Texttable module
	4. prompt(string) - a string that gets reassigned for each input prompt
	5. amount(float) - number that gets reassigned every time the user inputs a deposit or withdrawal amount
	6. my_acc(class object) - an object that stores the BankAcct() class instantiation
	7. int_table(table object) - a table of interest rate options
	8. int_table_title(string) - title of the interest rate options table

     Logical Steps: 

	1. Globalize my_acc object.
	2. Define adj variable.
	3. Create "while" loop that continues or exits based on user input.
	4. Define rate_info table with options and rates.
	5. Define t object and format the table by aligning its columns and adding rows.
	6. Define the prompt used in typo_checker.
	7. Run typo_checker and save its return value to amount.
	8. Instantiate the BankAcct class and assign it to my_acc.
	9. Print the interest rate title and table.
	10. Call option_validator(), a helper function that prompts for valid input if needed.
	11. Deposit the amount inputted by the user to their balance.
	12. Adjust the interest rate according to their choice.
	13. Calculate the total earnings based on the interest rate.
	14. Display the balance and estimated interest to be earned.
	15. When the user does not need to make any adjustments, the while loop ends.
	16. Call menu() function.

     Returns: None


3. Function Name: typo_checker 

     Description: A typo checker for validating amounts that the user inputs.

     Parameters: prompt(string) - a string that gets reassigned for each input prompt

     Variables: 

	1. amount(float) - number that gets reassigned every time the user inputs a deposit or withdrawal amount
	2. typo_found(Boolean variable) - variable that changes from True to False when the user enters input that 	   is typo-free

     Logical Steps: 

	1. Define try-except block that checks for typos in "amount" input.
	2. When a ValueError is caught, typo_found = True.
	3. Define "while" loop with the condition of typo_found being True.
	4. Define a try-except block inside the "while" loop that reiterates until the user enters a typo-free 		   response.
	5. When the input is typo-free, typo_found = False and the while loop ends.

     Returns: amount(float) - number that gets reassigned every time the user inputs a deposit or withdrawal amount


4. Function Name: option_validator 

     Description: Function that validates a user choice based on which "option" they enter.

     Parameters: None

     Variables: 

	1. option(global integer input) - user input that determines which function will iterate next 

     Logical Steps: 

	1. Globalize option variable
	2. Define try-except block that catches a value error when a letter is entered.
	3. When a ValueError is caught, the program calls the exit_() function.
	4. Define "while" loop that reiterates until it receives valid input.
	5. When valid input is achieved, change the class variable "opt" according to the user's choice.

     Returns: option(global integer input) - user input that determines which function will iterate next

5. Function Name: menu 

     Description: Main menu where the user can choose what action they want to take.

     Parameters: 

	1. int_table_title(string) - title of the interest rate options 
	2. tableint_table(table object) - a table of interest rate options

     Variables: 

	1. menu_options(list) - options and account actions stored in sub lists
	2. mt(table object) - an object for creating a table from Texttable module
	3. prompt(string) - a string that gets reassigned for each input prompt
	4. amount(float) - number that gets reassigned every time the user inputs a deposit or withdrawal amount

     Logical Steps: 

	1. Define a while loop that ends when the user enters an "X"; Although this isn't made known, there needed 	to be a condition for the loop that ends the program when the user wants to exit.
	2. Define menu_options list with options and account actions.
	3. Define a new Texttable object for the menu table.
	4. Format the table and add rows to it as defined in the menu_options list.	
	5. Print the menu table.
	6. Call option_validator().
	7. Define "if" statement with multiple "elif"s that matches the "option" variable to one of its conditions.
	8. Depending on what option the user inputs, one of the "if" statements is executed.
	9. If the user enters an any key besides a number 1 through 4, the exit_() function is called.

     Returns: None

6. Function Name: exit_
 
     Description: Function that ends the program.

     Parameters: None  

     Variables: None

     Logical Steps: 

	1. Prints a thank you message and calls the exit() function to exit the program.

     Returns: None



Classes used in the Program (list in order as they are called):


1. Class Name: BankAcct
	
	Description: Holds all methods for interacting with user bank account data.
	
	Parameters: 
		
	   1. name(input string) - the user's name
	   2. a_num(input string) - the user's "account number" (fictitious)
	   3. amnt(float) - number that gets reassigned every time the user inputs a deposit or withdrawal amount
	
	Variables:
	  
	   1. self.name = name(input string) - the user's name
           2. self.a_num(input string) - the user's account number
           3. self.bal(float) - the user's balance
           4. self.amnt(float) - the user-inputted amount
           5. self.int_rate(float) - the interest rate
           6. self.str_rate(string) - the interest rate as a formatted string
           7. self.str_bal(string) - the user's balance as a formatted string
           8. self.str_time(string) - the interest term amount as a formatted string
           9. self.annual(float) - the interest earned annually
           10. self.opt(None) - the user's option that gets assigned later
           11. self.insuff_funds(Boolean variable) - used to break an "if" loop in withdrawal method

	Methods:

	1. Method Name: adj_int
 
     	   	Description: Assigns a value to interest rate based on user input.

     	   	Parameters: self.opt(None) - the user's option that gets assigned based on user input

     	   	Variables: 

			1. self.int_rate(float) - the interest rate

     		Logical Steps: 

			1. Define "if" statement with multiple "elif"s that iterate based on user input.
			2. Depending on which "if" statement is fulfilled, the int_rate is reassigned to a specific 			decimal.

     		Returns: self.int_rate(float) - the new reassigned interest rate

	2. Method Name: calc_int
 
     	   	Description: Calculates interest earned with simple interest formula (P*r*t)

     	   	Parameters: None

     	   	Variables: 

			1. self.int_rate(float) - the interest rate
			2. self.str_rate(string) - interest rate expressed in a string
			3. self.str_time(string) - interest term that differs for each rate
			4. self.amnt(float) - the user-inputted amount
			5. self.annual(float) - the interest earned annually

     		Logical Steps: 

			1. Define "if" statement with multiple "elif"s that calculates interest based on user-					chosen percentage.
			2. Depending on which "if" statement is fulfilled, the int_rate is reassigned to a specific 			decimal, the str_rate is reassigned to a specific string, str_time is reassigned to a 				specific string, amnt is reassigned to a specific float amount, and annual is reassigned to 			the product of the user's balance and interest rate.

     		Returns: self.amnt(float) - the product of the user's balance and interest rate

	3. Method Name: deposit
 
     	   	Description: "Adds money" to the user's "bank account"

     	   	Parameters: self.amnt(float) - the user-inputted amount

     	   	Variables: 

			1. self.bal(float) - the user's balance
			2. self.amnt(float) - the user-inputted amount
			
     		Logical Steps: 

			1. Add the amount of "amnt" to "bal" and reassign that number to "bal"
			2. Display a success message.

     		Returns: self.bal(float) - the user's balance

	4. Method Name: withdrawal
 
     	   	Description: Calculates account withdrawals; also prompts the user to enter a valid amount if
   			their account would go negative upon withdrawal.

     	   	Parameters: self.amnt(float) - the user-inputted amount

     	   	Variables: 

			1. self.bal(float) - the user's balance
			2. self.amnt(float) - the user-inputted amount
			3. self.insuff_funds(Boolean variable) - used to break an "if" loop
			
     		Logical Steps: 

			1. Minus "amnt" amount from "bal" and reassign that number to "bal"
			2. Define "if" statement that detects withdrawals that would make the account go negative.
			3. If the "if" statement is true, insuff_funds = True.
			4. "Amnt" is added back to the user's balance ("bal")
			5. Print the current balance.
			6. The user gets prompted to enter a valid amount, and the input is saved to self.amnt
			7. The input is withdrawn the user's balance
			8. If the user enters another invalid amount, a while loop will reiterate until valid input 			has been attained.
			9. Print success message when the withdrawal is successful.

     		Returns: self.bal(float) - the user's balance

	5. Method Name: __str__
 
     	   	Description: Displays account balance, interest rate, and monetary accumulation.

     	   	Parameters: None

     	   	Variables: 

			1. amnt_fmt(format string) - Defined format pattern for formatting string values
        		2. self.str_annual(string) - Reformatted annual amount
        		3. self.str_bal(string) - Reformatted account balance
        		4. self.str_amnt(string) - Reformatted amount
			5. self.cb(string) - Stores only the current balance to be printed in the withdrawal method
			6. self.acc_int(string) - Stores interest rate and accumulated amount in a string
			
     		Logical Steps: 

			1. Define a format string pattern assigned to amnt_fmt
			2. Use the format method and pattern on the "annual," "bal," and "amnt" variables and 				reassign each of them to a separate variable.
			3. Define "cb" as a string containing the account balance.
			4. Define "acc_int" as a string that stores the interest rate and accumulated amount.
			5. Define "if" statement that adds the annual interest earnings to "acc_int" when they 				choose a monthly, bimonthly, or quarterly interest option.
			6. Define an "if" statement that iterates if insuff_funds is True.
			7. If insuff_funds is True, only the current balance is returned.
			8. For every other case, "cb" is returned with "acc_int"

     		Returns: 
			1. self.cb(string) - Stores only the current balance to be printed in the withdrawal method 
		   or
			2. self.cb(string) - Stores only the current balance to be printed in the withdrawal method
			and self.acc_int(string) - Stores interest rate and accumulated amount in a string

		
	Logical Steps:

	1. Call the main() function.
	2. Call the init_transaction() function within the main() function.
	3. Call the typo_checker() function within the init_transaction() function.
	4. Call the option_validator() function within the init_transaction() function.
	5. If the user wants to exit the program, call the exit_() function that calls the exit() function.
	5. Call the deposit method within the BankAcct class.
	6. Call the adj_int method within the BankAcct class.
	7. Call the calc_int method within the BankAcct class.
	8. Call the __str__ method within the BankAcct class.
	9. Call the menu() function within the init_transaction() function.
	10. Call the option_validator() function within the menu() function.
	11. If the user chooses to deposit: call typo_checker() function, deposit method, and calc_int method.
	12. If the user chooses with withdrawal: call typo_checker() function, withdrawal method, and calc_int 	method.
	13. If the user wants to see their account balance, call the __str__ method within the BankAcct class.
	14. If the user wants to adjust their interest rate, call option_validator() function, adj_int method, 	calc_int method, and __str__ method.
	15. If the user enters an alphabetical character, call the exit_() function within the option_validator() 	function or menu() function.
	16. Call exit() function within exit_() function.


Link to your repository: https://github.com/Cyb3rS1/Fast-Banking


